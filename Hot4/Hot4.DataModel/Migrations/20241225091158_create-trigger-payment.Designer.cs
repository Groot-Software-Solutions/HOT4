// <auto-generated />
using System;
using Hot4.DataModel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hot4.DataModel.Migrations
{
    [DbContext(typeof(HotDbContext))]
    [Migration("20241225091158_create-trigger-payment")]
    partial class createtriggerpayment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hot4.DataModel.Models.Access", b =>
                {
                    b.Property<long>("AccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccessId"));

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccessPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<byte>("ChannelId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ChannelID");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccessId");

                    b.HasIndex("ChannelId");

                    b.HasIndex(new[] { "AccessCode" }, "IX_AccessCode");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountID_AccessID");

                    b.ToTable("tblAccess", null, t =>
                        {
                            t.HasTrigger("trgEnsurePasswordHash");

                            t.HasTrigger("trgOnlyOneActiveAccess_OnInsert");

                            t.HasTrigger("trgOnlyOneActiveAccess_OnUpdate");

                            t.HasTrigger("trgStopBlank");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.AccessWeb", b =>
                {
                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<string>("AccessName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ResetToken")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("");

                    b.Property<bool>("SalesPassword")
                        .HasColumnType("bit");

                    b.Property<string>("WebBackground")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.HasKey("AccessId");

                    b.ToTable("tblAccessWeb", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NationalID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("AccountId");

                    b.HasIndex(new[] { "ReferredBy" }, "IX_AccountName_RefferedBy");

                    b.HasIndex(new[] { "AccountName", "Email" }, "IX_Name_and_Email");

                    b.HasIndex(new[] { "ProfileId" }, "IX_ProfileId");

                    b.HasIndex(new[] { "AccountId", "AccountName", "NationalId", "Email", "ReferredBy" }, "IX_Search");

                    b.ToTable("tblAccount", null, t =>
                        {
                            t.HasTrigger("AccountInsert_AddLimit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Address", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte?>("InvoiceFreq")
                        .HasColumnType("tinyint");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<long?>("SageId")
                        .HasColumnType("bigint")
                        .HasColumnName("SageID");

                    b.Property<long?>("SageIdusd")
                        .HasColumnType("bigint")
                        .HasColumnName("SageIDUsd");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("AccountId");

                    b.ToTable("tblAddress", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.BankTrx", b =>
                {
                    b.Property<long>("BankTrxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("BankTrxID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BankTrxId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<string>("BankRef")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<long>("BankTrxBatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("BankTrxBatchID");

                    b.Property<byte>("BankTrxStateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BankTrxStateID");

                    b.Property<byte>("BankTrxTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BankTrxTypeID");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID");

                    b.Property<string>("RefName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("TrxDate")
                        .HasColumnType("datetime");

                    b.HasKey("BankTrxId");

                    b.HasIndex("BankTrxStateId");

                    b.HasIndex("BankTrxTypeId");

                    b.HasIndex("PaymentId");

                    b.HasIndex(new[] { "Amount", "Identifier", "BankRef" }, "IX_BankTrx_Search");

                    b.HasIndex(new[] { "BankTrxBatchId", "Identifier", "TrxDate", "BankRef", "RefName", "Amount", "Balance" }, "IX_tblBankTrx")
                        .IsUnique();

                    b.ToTable("tblBankTrx", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.BankTrxBatch", b =>
                {
                    b.Property<long>("BankTrxBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("BankTrxBatchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BankTrxBatchId"));

                    b.Property<byte>("BankId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BankID");

                    b.Property<DateTime>("BatchDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BatchReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LastUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BankTrxBatchId");

                    b.HasIndex("BankId");

                    b.ToTable("tblBankTrxBatch", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.BankTrxStates", b =>
                {
                    b.Property<byte>("BankTrxStateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BankTrxStateID");

                    b.Property<string>("BankTrxState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BankTrxStateId");

                    b.ToTable("tblBankTrxState", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.BankTrxTypes", b =>
                {
                    b.Property<byte>("BankTrxTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BankTrxTypeID");

                    b.Property<string>("BankTrxType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BankTrxTypeId");

                    b.ToTable("tblBankTrxType", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Banks", b =>
                {
                    b.Property<byte>("BankId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BankID");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SageBankId")
                        .HasColumnType("int")
                        .HasColumnName("SageBankID");

                    b.HasKey("BankId");

                    b.ToTable("tblBank", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.BankvPayment", b =>
                {
                    b.Property<long?>("BankTrxId")
                        .HasColumnType("bigint")
                        .HasColumnName("BankTrxID");

                    b.Property<string>("CheckUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CheckURL");

                    b.Property<string>("ErrorMsg")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ProcessUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ProcessURL");

                    b.Property<Guid?>("VPaymentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vPaymentID");

                    b.Property<string>("VPaymentRef")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("vPaymentRef");

                    b.ToTable("tblBankvPayment", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Brand", b =>
                {
                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BrandSuffix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("NetworkId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NetworkID");

                    b.Property<int?>("WalletTypeId")
                        .HasColumnType("int");

                    b.HasKey("BrandId");

                    b.HasIndex("NetworkId");

                    b.ToTable("tblBrand", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Bundle", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasComment("Bundle Value in cents");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<int>("BundleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BundleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BundleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ValidityPeriod")
                        .HasColumnType("int")
                        .HasComment("Validity Period in Days");

                    b.ToTable("tblBundles", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Channels", b =>
                {
                    b.Property<byte>("ChannelId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ChannelID");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ChannelId");

                    b.ToTable("tblChannel", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Configs", b =>
                {
                    b.Property<byte>("ConfigId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ConfigID");

                    b.Property<decimal>("MaxRecharge")
                        .HasColumnType("money");

                    b.Property<decimal>("MinRecharge")
                        .HasColumnType("money");

                    b.Property<decimal>("MinTransfer")
                        .HasColumnType("money");

                    b.Property<bool>("PrepaidEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("ProfileIdNewSmsdealer")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID_NewSMSDealer");

                    b.Property<int>("ProfileIdNewWebDealer")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID_NewWebDealer");

                    b.HasKey("ConfigId");

                    b.ToTable("tblConfig", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ConsoleAccess", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ConsoleActionId")
                        .HasColumnType("int");

                    b.HasKey("RoleName", "ConsoleActionId");

                    b.HasIndex("ConsoleActionId");

                    b.ToTable("tblConsoleAccess", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ConsoleAction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("tblConsoleAction", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ErrorLog", b =>
                {
                    b.Property<int>("CheckId")
                        .HasColumnType("int")
                        .HasColumnName("CheckID");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("int")
                        .HasComment("0");

                    b.Property<string>("ErrorData")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("");

                    b.Property<long>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ErrorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ErrorId"));

                    b.Property<DateTime>("LogDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("");

                    b.HasIndex(new[] { "LogDate", "CheckId" }, "Error LogDate and CheckID")
                        .IsDescending(true, false);

                    b.HasIndex(new[] { "CheckId" }, "IX_CheckID_ErrorID");

                    b.ToTable("tblErrorLog", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ErrorLogContact", b =>
                {
                    b.Property<string>("ContactEmail")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactMobile")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("ErrorLogtypeId")
                        .HasColumnType("int")
                        .HasColumnName("ErrorLogtypeID");

                    b.Property<int>("TestType")
                        .HasColumnType("int");

                    b.ToTable("tblErrorLogContacts", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ErrorLogNetwork", b =>
                {
                    b.Property<int>("ErrorLogNetworkId")
                        .HasColumnType("int")
                        .HasColumnName("ErrorLogNetworkID");

                    b.Property<int>("HotBrandId")
                        .HasColumnType("int")
                        .HasColumnName("HotBrandID");

                    b.Property<string>("NetworkName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.ToTable("tblErrorLogNetworks", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ErrorLogSetup", b =>
                {
                    b.Property<int>("CheckInterval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30000);

                    b.Property<int>("CountThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ErrorInterval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10000);

                    b.Property<int>("ErrorLogCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ErrorLogCheckID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorLogCheckId"));

                    b.Property<string>("ExpectedContent")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("HostAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Latency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Network")
                        .HasColumnType("int");

                    b.Property<string>("Port")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Server")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("");

                    b.Property<int>("TestType")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("URL");

                    b.ToTable("tblErrorLogSetup", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ErrorLogTestType", b =>
                {
                    b.Property<int>("TestTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TestTypeID");

                    b.Property<string>("TestTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("tblErrorLogTestType", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.HotTypeCode", b =>
                {
                    b.Property<byte>("HotTypeCodeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("HotTypeCodeID");

                    b.Property<byte>("HotTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("HotTypeID");

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("HotTypeCodeId");

                    b.HasIndex("HotTypeId");

                    b.ToTable("tblHotTypeCode", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.HotTypes", b =>
                {
                    b.Property<byte>("HotTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("HotTypeID");

                    b.Property<string>("HotType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte?>("SplitCount")
                        .HasColumnType("tinyint");

                    b.HasKey("HotTypeId");

                    b.ToTable("tblHotType", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Limit", b =>
                {
                    b.Property<long>("LimitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LimitId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<double>("DailyLimit")
                        .HasColumnType("float");

                    b.Property<int>("LimitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<double>("MonthlyLimit")
                        .HasColumnType("float");

                    b.Property<byte>("NetworkId")
                        .HasColumnType("tinyint");

                    b.HasKey("LimitId");

                    b.HasIndex(new[] { "AccountId", "NetworkId" }, "IX_Limits_Select");

                    b.ToTable("tblLimits", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.LimitType", b =>
                {
                    b.Property<int>("LimitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LimitTypeId"));

                    b.Property<string>("LimitTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("LimitTypeId");

                    b.ToTable("tblLimitTypes", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Log", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LogId"));

                    b.Property<long?>("Idnumber")
                        .HasColumnType("bigint")
                        .HasColumnName("IDNumber");

                    b.Property<string>("Idtype")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("IDType");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LogDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LogMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LogModule")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LogObject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LogId");

                    b.HasIndex(new[] { "LogDate", "LogMethod" }, "IX_Date_Method");

                    b.ToTable("tblLog", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Networks", b =>
                {
                    b.Property<byte>("NetworkId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NetworkID");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("NetworkId");

                    b.ToTable("tblNetwork", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Payment", b =>
                {
                    b.Property<long>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PaymentId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("LastUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("PaymentSourceId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PaymentSourceID");

                    b.Property<byte>("PaymentTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PaymentTypeID");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("PaymentId");

                    b.HasIndex("PaymentSourceId");

                    b.HasIndex(new[] { "AccountId", "PaymentTypeId", "PaymentDate" }, "IX_Balances")
                        .IsDescending(false, false, true);

                    b.HasIndex(new[] { "PaymentTypeId" }, "IX_Balances_Extra");

                    b.HasIndex(new[] { "AccountId", "PaymentId" }, "IX_PaymentAccount");

                    b.HasIndex(new[] { "PaymentDate" }, "IX_PaymentDate");

                    b.ToTable("tblPayment", null, t =>
                        {
                            t.HasTrigger("EmailPaymentInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.PaymentSources", b =>
                {
                    b.Property<byte>("PaymentSourceId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PaymentSourceID");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int");

                    b.HasKey("PaymentSourceId");

                    b.ToTable("tblPaymentSource", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.PaymentTypes", b =>
                {
                    b.Property<byte>("PaymentTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PaymentTypeID");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PaymentTypeId");

                    b.ToTable("tblPaymentType", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.PinBatchTypes", b =>
                {
                    b.Property<byte>("PinBatchTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PinBatchTypeID");

                    b.Property<string>("PinBatchType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PinBatchTypeId");

                    b.ToTable("tblPinBatchType", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.PinBatches", b =>
                {
                    b.Property<long>("PinBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PinBatchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PinBatchId"));

                    b.Property<DateTime>("BatchDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PinBatch")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<byte>("PinBatchTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PinBatchTypeID");

                    b.HasKey("PinBatchId");

                    b.HasIndex("PinBatchTypeId");

                    b.ToTable("tblPinBatch", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.PinStates", b =>
                {
                    b.Property<byte>("PinStateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PinStateID");

                    b.Property<string>("PinState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PinStateId");

                    b.ToTable("tblPinState", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Pins", b =>
                {
                    b.Property<long>("PinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PinID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PinId"));

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("PinBatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("PinBatchID");

                    b.Property<DateTime>("PinExpiry")
                        .HasColumnType("datetime");

                    b.Property<string>("PinRef")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PinStateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PinStateID");

                    b.Property<decimal>("PinValue")
                        .HasColumnType("money");

                    b.HasKey("PinId");

                    b.HasIndex("BrandId");

                    b.HasIndex("PinBatchId");

                    b.HasIndex("PinStateId");

                    b.HasIndex(new[] { "Pin", "BrandId" }, "IX_tblPin")
                        .IsUnique();

                    b.ToTable("tblPin", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Priorities", b =>
                {
                    b.Property<byte>("PriorityId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PriorityID");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PriorityId");

                    b.HasIndex(new[] { "PriorityId", "Priority" }, "IX_Priority");

                    b.ToTable("tblPriority", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Product", b =>
                {
                    b.Property<byte>("ProductId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProductStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("WalletTypeId");

                    b.ToTable("tblProduct", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ProductField", b =>
                {
                    b.Property<int>("BrandFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandFieldId"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("ProductId")
                        .HasColumnType("tinyint");

                    b.HasKey("BrandFieldId")
                        .HasName("PK_tblBrandField");

                    b.HasIndex("ProductId");

                    b.ToTable("tblProductField", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ProductMetaData", b =>
                {
                    b.Property<int>("ProductMetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductMetaId"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<byte>("ProductId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ProductMetaDataTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("ProductMetaId")
                        .HasName("PK_tblBrandMetaData");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductMetaDataTypeId");

                    b.ToTable("tblProductMetaData", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ProductMetaDataType", b =>
                {
                    b.Property<byte>("ProductMetaDataTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("ProductMetaDataTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProductMetaDataTypeId")
                        .HasName("PK_tblBrandMetaDataType");

                    b.ToTable("tblProductMetaDataType", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProfileId");

                    b.ToTable("tblProfile", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ProfileBackup", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("tblprofile_backup", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ProfileDiscount", b =>
                {
                    b.Property<int>("ProfileDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileDiscountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileDiscountId"));

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<decimal>("Discount")
                        .HasColumnType("money");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.HasKey("ProfileDiscountId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProfileId");

                    b.ToTable("tblProfileDiscount", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Recharge", b =>
                {
                    b.Property<long>("RechargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RechargeId"));

                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<decimal>("Discount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("PinsPinId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RechargeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Smsid")
                        .HasColumnType("bigint");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.HasKey("RechargeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("PinsPinId");

                    b.HasIndex("Smsid");

                    b.HasIndex(new[] { "AccessId", "StateId", "BrandId", "RechargeDate" }, "IX_Balances")
                        .IsDescending(false, false, false, true);

                    b.HasIndex(new[] { "StateId", "BrandId" }, "IX_Balances_Extra");

                    b.HasIndex(new[] { "RechargeDate", "Mobile" }, "IX_Mobile")
                        .IsDescending(true, false);

                    b.HasIndex(new[] { "AccessId" }, "IX_RechargeAccount");

                    b.HasIndex(new[] { "RechargeDate" }, "IX_RechargeDate");

                    b.HasIndex(new[] { "RechargeDate", "StateId" }, "IX_RechargeDateState")
                        .IsDescending(true, false);

                    b.HasIndex(new[] { "RechargeId", "StateId", "BrandId" }, "IX_Search")
                        .IsDescending(true, false, false);

                    b.HasIndex(new[] { "StateId", "AccessId" }, "IX_StateID");

                    b.ToTable("tblRecharge", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.RechargePin", b =>
                {
                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("PinId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("RechargeId", "PinId");

                    b.HasIndex("PinId");

                    b.ToTable("tblRechargePin", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.RechargePrepaid", b =>
                {
                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<string>("Data")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("DebitCredit")
                        .HasColumnType("bit");

                    b.Property<decimal>("FinalBalance")
                        .HasColumnType("money");

                    b.Property<decimal?>("FinalWallet")
                        .HasColumnType("money");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("money");

                    b.Property<decimal?>("InitialWallet")
                        .HasColumnType("money");

                    b.Property<string>("Narrative")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReturnCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("Sms")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("SMS")
                        .IsFixedLength();

                    b.Property<DateTime?>("Window")
                        .HasColumnType("datetime");

                    b.HasKey("RechargeId")
                        .HasName("PK_tblRechargePrepaid_1");

                    b.ToTable("tblRechargePrepaid", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Reservation", b =>
                {
                    b.Property<long>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReservationId"));

                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ConfirmationData")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NotificationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.Property<string>("TargetNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ReservationId")
                        .HasName("PK_tblreservation");

                    b.HasIndex("AccessId");

                    b.HasIndex("BrandId");

                    b.HasIndex("RechargeId");

                    b.HasIndex("StateId");

                    b.ToTable("tblReservation", null, t =>
                        {
                            t.HasTrigger("LogNewReservation");

                            t.HasTrigger("LogReservationUpdates");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ReservationLog", b =>
                {
                    b.Property<string>("LastUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<DateTime>("LogDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("NewStateId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("OldStateId")
                        .HasColumnType("tinyint");

                    b.Property<long>("ReservationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReservationLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReservationLogId"));

                    b.HasIndex("NewStateId");

                    b.HasIndex("OldStateId");

                    b.HasIndex("ReservationId");

                    b.ToTable("tblReservationLog", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ReservationStates", b =>
                {
                    b.Property<byte>("ReservationStateId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ReservationState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ReservationStateId");

                    b.ToTable("tblReservationState", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.SelfTopUp", b =>
                {
                    b.Property<long>("SelfTopUpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SelfTopUpId"));

                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<long?>("BankTrxId")
                        .HasColumnType("bigint")
                        .HasColumnName("BankTrxID");

                    b.Property<string>("BillerNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint");

                    b.Property<int>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NotificationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.Property<string>("TargetNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SelfTopUpId");

                    b.HasIndex("AccessId");

                    b.HasIndex("BankTrxId");

                    b.HasIndex("BrandId");

                    b.HasIndex("RechargeId");

                    b.ToTable("tblSelfTopUp", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.SelfTopUpState", b =>
                {
                    b.Property<byte>("SelfTopUpStateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("SelfTopUpStateID");

                    b.Property<string>("SelfTopUpStateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SelfTopUpStateId");

                    b.ToTable("tblSelfTopUpState", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Smpp", b =>
                {
                    b.Property<byte>("SmppId")
                        .HasColumnType("tinyint")
                        .HasColumnName("SmppID");

                    b.Property<string>("AddressRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("AllowReceive")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSend")
                        .HasColumnType("bit");

                    b.Property<int>("DestinationAddressNpi")
                        .HasColumnType("int");

                    b.Property<int>("DestinationAddressTon")
                        .HasColumnType("int");

                    b.Property<string>("EconetPrefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("InterfaceVersion")
                        .HasColumnType("int");

                    b.Property<string>("NetOnePrefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RemoteHost")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RemotePort")
                        .HasColumnType("int");

                    b.Property<bool>("SmppEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("SmppName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SmppPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SmppTimeout")
                        .HasColumnType("int");

                    b.Property<string>("SourceAddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("SourceAddressNpi")
                        .HasColumnType("int");

                    b.Property<int>("SourceAddressTon")
                        .HasColumnType("int");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SystemID");

                    b.Property<string>("SystemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TelecelPrefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SmppId");

                    b.ToTable("tblSmpp", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Sms", b =>
                {
                    b.Property<long>("Smsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SMSID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Smsid"));

                    b.Property<bool>("Direction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PriorityId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PriorityID");

                    b.Property<byte?>("SmppId")
                        .HasColumnType("tinyint")
                        .HasColumnName("SmppID");

                    b.Property<DateTime>("Smsdate")
                        .HasColumnType("datetime")
                        .HasColumnName("SMSDate");

                    b.Property<long?>("SmsidIn")
                        .HasColumnType("bigint")
                        .HasColumnName("SMSID_In");

                    b.Property<string>("Smstext")
                        .IsRequired()
                        .HasMaxLength(640)
                        .IsUnicode(false)
                        .HasColumnType("varchar(640)")
                        .HasColumnName("SMSText");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.HasKey("Smsid");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SmppId");

                    b.HasIndex(new[] { "Smsdate" }, "IX_SMSDate");

                    b.HasIndex(new[] { "Mobile" }, "IX_SMSMobile");

                    b.HasIndex(new[] { "StateId", "Direction" }, "IX_SMS_Inbox");

                    b.HasIndex(new[] { "Smsdate", "StateId", "Mobile", "Smstext", "PriorityId", "Smsid" }, "IX_SMS_Search");

                    b.HasIndex(new[] { "SmsidIn" }, "SmsOut");

                    b.ToTable("tblSMS", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.SmsRecharge", b =>
                {
                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<long>("SmsId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("RechargeId", "SmsId");

                    b.HasIndex("SmsId");

                    b.ToTable("tblSmsRecharge", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.States", b =>
                {
                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StateId");

                    b.ToTable("tblState", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.StockData", b =>
                {
                    b.Property<int?>("Available")
                        .HasColumnType("int");

                    b.Property<string>("BrandName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastSold")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("MonthSold")
                        .HasColumnType("money");

                    b.Property<decimal?>("PinValue")
                        .HasColumnType("money");

                    b.Property<decimal?>("Sold")
                        .HasColumnType("money");

                    b.Property<decimal?>("WeekSold")
                        .HasColumnType("money");

                    b.ToTable("tblStockData", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Subscriber", b =>
                {
                    b.Property<long>("SubscriberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SubscriberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubscriberId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<decimal?>("DefaultAmount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int?>("DefaultProductId")
                        .HasColumnType("int")
                        .HasColumnName("DefaultProductID");

                    b.Property<byte?>("NetworkId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NetworkID");

                    b.Property<string>("NotifyNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubscriberGroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubscriberMobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubscriberName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("SubscriberId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BrandId");

                    b.HasIndex(new[] { "SubscriberMobile" }, "IX_SubMobile");

                    b.ToTable("tblSubscriber", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Template", b =>
                {
                    b.Property<int>("TemplateId")
                        .HasColumnType("int")
                        .HasColumnName("TemplateID");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TemplateText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("TemplateId");

                    b.ToTable("tblTemplate", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Transfer", b =>
                {
                    b.Property<long>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TransferID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransferId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<byte>("ChannelId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ChannelID");

                    b.Property<long>("PaymentIdFrom")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID_From");

                    b.Property<long>("PaymentIdTo")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID_To");

                    b.Property<long>("Smsid")
                        .HasColumnType("bigint")
                        .HasColumnName("SMSID");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime");

                    b.HasKey("TransferId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("PaymentIdFrom");

                    b.HasIndex("PaymentIdTo");

                    b.ToTable("tblTransfer", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwAccess", b =>
                {
                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<string>("AccessPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("ChannelId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ChannelID");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwAccess", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwAccessWeb", b =>
                {
                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<string>("AccessName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccessPassword")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<byte>("ChannelId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ChannelID");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("WebBackground")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwAccess_Web", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwAccount", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NationalID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal>("SaleValue")
                        .HasColumnType("money");

                    b.Property<decimal>("Usdbalance")
                        .HasColumnType("money")
                        .HasColumnName("USDBalance");

                    b.Property<decimal>("UsdutilityBalance")
                        .HasColumnType("money")
                        .HasColumnName("USDUtilityBalance");

                    b.Property<decimal>("Zesabalance")
                        .HasColumnType("money")
                        .HasColumnName("ZESABalance");

                    b.ToTable((string)null);

                    b.ToView("vwAccount", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwAccountDetail", b =>
                {
                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<byte>("ChannelId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ChannelID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NationalID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.ToTable((string)null);

                    b.ToView("vwAccountDetail", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwAccountOld", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("money");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NationalID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal?>("SaleValue")
                        .HasColumnType("money");

                    b.Property<decimal?>("Zesabalance")
                        .HasColumnType("money")
                        .HasColumnName("ZESABalance");

                    b.ToTable((string)null);

                    b.ToView("vwAccount_Old", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwAccountWeb", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("money");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<double?>("LatitudeY")
                        .HasColumnType("float");

                    b.Property<double?>("LongitudeX")
                        .HasColumnType("float");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NationalID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("SaleValue")
                        .HasColumnType("money");

                    b.Property<long?>("VatNumber")
                        .HasColumnType("bigint");

                    b.ToTable((string)null);

                    b.ToView("vwAccount_Web", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwBalance", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("money");

                    b.Property<decimal?>("SaleValue")
                        .HasColumnType("money");

                    b.Property<decimal?>("Usdbalance")
                        .HasColumnType("money")
                        .HasColumnName("USDBalance");

                    b.Property<decimal?>("UsdutilityBalance")
                        .HasColumnType("money")
                        .HasColumnName("USDUtilityBalance");

                    b.Property<decimal?>("Zesabalance")
                        .HasColumnType("money")
                        .HasColumnName("ZESABalance");

                    b.ToTable((string)null);

                    b.ToView("vwBalances", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwBankTrx", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<string>("BankRef")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("BankTrxBatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("BankTrxBatchID");

                    b.Property<long>("BankTrxId")
                        .HasColumnType("bigint")
                        .HasColumnName("BankTrxID");

                    b.Property<string>("BankTrxState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("BankTrxStateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BankTrxStateID");

                    b.Property<string>("BankTrxType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("BankTrxTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BankTrxTypeID");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID");

                    b.Property<string>("RefName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("TrxDate")
                        .HasColumnType("datetime");

                    b.ToTable((string)null);

                    b.ToView("vwBankTrx", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwBankTrxBatch", b =>
                {
                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("BankId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BankID");

                    b.Property<long>("BankTrxBatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("BankTrxBatchID");

                    b.Property<DateTime>("BatchDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BatchReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LastUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwBankTrxBatch", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwBankTrxDetail", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("BankId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BankID");

                    b.Property<string>("BankRef")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("BankTrxId")
                        .HasColumnType("bigint")
                        .HasColumnName("BankTrxID");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID");

                    b.Property<string>("RefName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("TrxDate")
                        .HasColumnType("datetime");

                    b.ToTable((string)null);

                    b.ToView("vwBankTrxDetail", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwBrand", b =>
                {
                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BrandSuffix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("NetworkId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NetworkID");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("WalletTypeId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwBrand", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwBundle", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<int>("BundleId")
                        .HasColumnType("int")
                        .HasColumnName("BundleID");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ValidityPeriod")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwBundles", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwErrorDetail", b =>
                {
                    b.Property<int>("CheckId")
                        .HasColumnType("int")
                        .HasColumnName("CheckID");

                    b.Property<int>("CheckInterval")
                        .HasColumnType("int");

                    b.Property<int>("CountThreshold")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("int");

                    b.Property<string>("ErrorData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ErrorId")
                        .HasColumnType("bigint")
                        .HasColumnName("ErrorID");

                    b.Property<int>("ErrorInterval")
                        .HasColumnType("int");

                    b.Property<string>("ExpectedContent")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("HostAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Latency")
                        .HasColumnType("int");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Network")
                        .HasColumnType("int");

                    b.Property<string>("Port")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TestTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("URL");

                    b.ToTable((string)null);

                    b.ToView("vwErrorDetail", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwErrorDetailVp", b =>
                {
                    b.Property<int>("CheckId")
                        .HasColumnType("int")
                        .HasColumnName("CheckID");

                    b.Property<int>("CheckInterval")
                        .HasColumnType("int");

                    b.Property<int>("CountThreshold")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("int");

                    b.Property<string>("ErrorData")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<long>("ErrorId")
                        .HasColumnType("bigint")
                        .HasColumnName("ErrorID");

                    b.Property<int>("ErrorInterval")
                        .HasColumnType("int");

                    b.Property<string>("ExpectedContent")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("HostAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<int?>("Latency")
                        .HasColumnType("int");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<int>("Network")
                        .HasColumnType("int");

                    b.Property<string>("Port")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("TestTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("URL")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.ToTable((string)null);

                    b.ToView("vwErrorDetail_VPS", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwErrorStatus", b =>
                {
                    b.Property<int?>("CheckId")
                        .HasColumnType("int")
                        .HasColumnName("CheckID");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("ErrorData")
                        .HasColumnType("text");

                    b.Property<long?>("ErrorId")
                        .HasColumnType("bigint")
                        .HasColumnName("ErrorID");

                    b.Property<int>("ErrorLogCheckId")
                        .HasColumnType("int")
                        .HasColumnName("ErrorLogCheckID");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LogErrorCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Network")
                        .HasColumnType("int");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("TestType")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwErrorStatus", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwPayment", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("LastUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PaymentSourceId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PaymentSourceID");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PaymentTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PaymentTypeID");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.ToTable((string)null);

                    b.ToView("vwPayment", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwPaymentDetail", b =>
                {
                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<byte>("ChannelId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ChannelID");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long>("Expr1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.ToTable((string)null);

                    b.ToView("vwPaymentDetail", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwPin", b =>
                {
                    b.Property<DateTime>("BatchDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BrandSuffix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("NetworkId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NetworkID");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PinBatch")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<long>("PinBatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("PinBatchID");

                    b.Property<string>("PinBatchType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PinBatchTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PinBatchTypeID");

                    b.Property<DateTime>("PinExpiry")
                        .HasColumnType("datetime");

                    b.Property<long>("PinId")
                        .HasColumnType("bigint")
                        .HasColumnName("PinID");

                    b.Property<string>("PinNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PinRef")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PinState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PinStateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PinStateID");

                    b.Property<decimal>("PinValue")
                        .HasColumnType("money");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwPin", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwPinBatch", b =>
                {
                    b.Property<DateTime>("BatchDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PinBatch")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<long>("PinBatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("PinBatchID");

                    b.Property<string>("PinBatchType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PinBatchTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PinBatchTypeID");

                    b.ToTable((string)null);

                    b.ToView("vwPinBatch", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwPlatformDetail", b =>
                {
                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<bool>("DebitCredit")
                        .HasColumnType("bit");

                    b.Property<decimal>("Discount")
                        .HasColumnType("money");

                    b.Property<decimal>("FinalBalance")
                        .HasColumnType("money");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("money");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Narrative")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("RechargeDate")
                        .HasColumnType("datetime");

                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ReturnCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.ToTable((string)null);

                    b.ToView("vwPlatformDetail", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwProfileDiscount", b =>
                {
                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BrandSuffix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("money");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("NetworkId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NetworkID");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProfileDiscountId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileDiscountID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.ToTable((string)null);

                    b.ToView("vwProfileDiscount", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwRecharge", b =>
                {
                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BrandSuffix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("NetworkId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NetworkID");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RechargeDate")
                        .HasColumnType("datetime");

                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.ToTable((string)null);

                    b.ToView("vwRecharge", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwRechargeListDetail", b =>
                {
                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("money");

                    b.Property<decimal?>("FinalBalance")
                        .HasColumnType("money");

                    b.Property<decimal?>("InitialBalance")
                        .HasColumnType("money");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Narrative")
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<DateTime>("RechargeDate")
                        .HasColumnType("datetime");

                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReturnCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.Property<int?>("WalletTypeId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vwRechargeListDetail", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwRechargeOld", b =>
                {
                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BrandSuffix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("money");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("NetworkId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NetworkID");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RechargeDate")
                        .HasColumnType("datetime");

                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.ToTable((string)null);

                    b.ToView("vwRechargeOld", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwRechargePrepaid", b =>
                {
                    b.Property<string>("Data")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<bool>("DebitCredit")
                        .HasColumnType("bit");

                    b.Property<decimal>("FinalBalance")
                        .HasColumnType("money");

                    b.Property<decimal?>("FinalWallet")
                        .HasColumnType("money");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("money");

                    b.Property<decimal?>("InitialWallet")
                        .HasColumnType("money");

                    b.Property<string>("Narrative")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ReturnCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("Sms")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("SMS")
                        .IsFixedLength();

                    b.Property<DateTime?>("Window")
                        .HasColumnType("datetime");

                    b.ToTable((string)null);

                    b.ToView("vwRechargePrepaid", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwRegistration", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Direction")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NationalID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("Smsdate")
                        .HasColumnType("datetime")
                        .HasColumnName("SMSDate");

                    b.Property<string>("Smstext")
                        .IsRequired()
                        .HasMaxLength(160)
                        .IsUnicode(false)
                        .HasColumnType("varchar(160)")
                        .HasColumnName("SMSText");

                    b.ToTable((string)null);

                    b.ToView("vwRegistration", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwReservation", b =>
                {
                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ConfirmationData")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<long>("ReservationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReservationState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.Property<string>("TargetNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwReservation", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwSelfTopUp", b =>
                {
                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<long>("BankTrxId")
                        .HasColumnType("bigint")
                        .HasColumnName("BankTrxID");

                    b.Property<string>("BillerNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<long>("SelfTopUpId")
                        .HasColumnType("bigint");

                    b.Property<string>("SelfTopUpStateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint");

                    b.Property<string>("TargetNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vwSelfTopUp", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwSm", b =>
                {
                    b.Property<bool>("Direction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Mobile")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PriorityId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PriorityID");

                    b.Property<byte?>("SmppId")
                        .HasColumnType("tinyint")
                        .HasColumnName("SmppID");

                    b.Property<DateTime>("Smsdate")
                        .HasColumnType("datetime")
                        .HasColumnName("SMSDate");

                    b.Property<long>("Smsid")
                        .HasColumnType("bigint")
                        .HasColumnName("SMSID");

                    b.Property<long?>("SmsidIn")
                        .HasColumnType("bigint")
                        .HasColumnName("SMSID_In");

                    b.Property<string>("Smstext")
                        .IsRequired()
                        .HasMaxLength(160)
                        .IsUnicode(false)
                        .HasColumnType("varchar(160)")
                        .HasColumnName("SMSText");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.ToTable((string)null);

                    b.ToView("vwSMS", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwSubscriber", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BrandSuffix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("NetworkId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NetworkID");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("SubscriberId")
                        .HasColumnType("bigint")
                        .HasColumnName("SubscriberID");

                    b.Property<string>("SubscriberMobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubscriberName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.ToTable((string)null);

                    b.ToView("vwSubscriber", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwTempRechargeDb", b =>
                {
                    b.Property<long>("NRecharge")
                        .HasColumnType("bigint")
                        .HasColumnName("nRecharge");

                    b.Property<byte>("NStateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("nStateID");

                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.ToTable((string)null);

                    b.ToView("vwTempRechargeDB", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwTransfer", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("ChannelId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ChannelID");

                    b.Property<long>("PaymentIdFrom")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID_From");

                    b.Property<long>("PaymentIdTo")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID_To");

                    b.Property<long>("Smsid")
                        .HasColumnType("bigint")
                        .HasColumnName("SMSID");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime");

                    b.Property<long>("TransferId")
                        .HasColumnType("bigint")
                        .HasColumnName("TransferID");

                    b.ToTable((string)null);

                    b.ToView("vwTransfer", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwzPayment", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("LastUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID");

                    b.Property<string>("PaymentSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PaymentSourceId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PaymentSourceID");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PaymentTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PaymentTypeID");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.ToTable((string)null);

                    b.ToView("vwzPayment", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwzPaymentTrf", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("AccountNameTo")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<long?>("AccountTo")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("From")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("From#");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentID");

                    b.Property<byte>("PaymentTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PaymentTypeID");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("To")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("To#");

                    b.ToTable((string)null);

                    b.ToView("vwzPaymentTrf", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwzRecharge", b =>
                {
                    b.Property<long>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BrandSuffix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("money");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("NetworkId")
                        .HasColumnType("tinyint")
                        .HasColumnName("NetworkID");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RechargeDate")
                        .HasColumnType("datetime");

                    b.Property<long>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.ToTable((string)null);

                    b.ToView("vwzRecharge", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.VwzSm", b =>
                {
                    b.Property<bool>("Direction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Insertdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("PriorityId")
                        .HasColumnType("tinyint")
                        .HasColumnName("PriorityID");

                    b.Property<byte?>("SmppId")
                        .HasColumnType("tinyint")
                        .HasColumnName("SmppID");

                    b.Property<DateTime>("Smsdate")
                        .HasColumnType("datetime")
                        .HasColumnName("SMSDate");

                    b.Property<long>("Smsid")
                        .HasColumnType("bigint")
                        .HasColumnName("SMSID");

                    b.Property<long?>("SmsidIn")
                        .HasColumnType("bigint")
                        .HasColumnName("SMSID_In");

                    b.Property<string>("Smstext")
                        .IsRequired()
                        .HasMaxLength(160)
                        .IsUnicode(false)
                        .HasColumnType("varchar(160)")
                        .HasColumnName("SMSText");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.ToTable((string)null);

                    b.ToView("vwzSMS", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.WalletType", b =>
                {
                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int");

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WalletTypeId");

                    b.ToTable("tblWalletType", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.WebRequest", b =>
                {
                    b.Property<long?>("AccessId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccessID");

                    b.Property<string>("AgentReference")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<byte>("ChannelId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ChannelID");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("money");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("money");

                    b.Property<byte?>("HotTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("HotTypeID");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("RechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("RechargeID");

                    b.Property<string>("Reply")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReturnCode")
                        .HasColumnType("int");

                    b.Property<byte>("StateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("StateID");

                    b.Property<decimal?>("WalletBalance")
                        .HasColumnType("money");

                    b.Property<long>("WebId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("WebID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WebId"));

                    b.HasIndex(new[] { "WebId", "StateId" }, "IX-StateID")
                        .IsUnique();

                    b.HasIndex(new[] { "AccessId", "AgentReference", "WebId", "RechargeId" }, "IX_AccessID_AgentRef");

                    b.HasIndex(new[] { "AgentReference", "RechargeId" }, "IX_Recharge_AgentRef");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "AgentReference", "RechargeId" }, "IX_Recharge_AgentRef"));

                    b.ToTable("tblWebRequest", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ZArchive", b =>
                {
                    b.Property<DateTime>("ArchiveEffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ArchiveRunDate")
                        .HasColumnType("datetime");

                    b.Property<long>("MaxPaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("MaxPaymentID");

                    b.Property<long>("MaxRechargeId")
                        .HasColumnType("bigint")
                        .HasColumnName("MaxRechargeID");

                    b.Property<long>("MaxSmsid")
                        .HasColumnType("bigint")
                        .HasColumnName("MaxSMSID");

                    b.ToTable("ztblArchive", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ZStat", b =>
                {
                    b.Property<long>("Accountid")
                        .HasColumnType("bigint")
                        .HasColumnName("accountid");

                    b.Property<string>("Band")
                        .IsRequired()
                        .HasMaxLength(19)
                        .IsUnicode(false)
                        .HasColumnType("varchar(19)");

                    b.Property<int?>("Mcount")
                        .HasColumnType("int")
                        .HasColumnName("MCount");

                    b.Property<decimal?>("Mvalue")
                        .HasColumnType("money")
                        .HasColumnName("MValue");

                    b.Property<int?>("Rmonth")
                        .HasColumnType("int")
                        .HasColumnName("RMonth");

                    b.ToTable("ztblStats", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ZvwProductlistdetail", b =>
                {
                    b.Property<int>("BrandFieldId")
                        .HasColumnType("int");

                    b.Property<byte>("BrandId")
                        .HasColumnType("tinyint")
                        .HasColumnName("BrandID");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Expr1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("ProductMetaDataTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("zvwProductlistdetail", (string)null);
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Access", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Account", "Account")
                        .WithMany("Accesses")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAccess_tblAccount");

                    b.HasOne("Hot4.DataModel.Models.Channels", "Channel")
                        .WithMany("Accesses")
                        .HasForeignKey("ChannelId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAccess_tblChannel");

                    b.Navigation("Account");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Account", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Profile", "Profile")
                        .WithMany("Accounts")
                        .HasForeignKey("ProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAccount_tblProfile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Address", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Account", "Account")
                        .WithOne("Address")
                        .HasForeignKey("Hot4.DataModel.Models.Address", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_tblAddress_tblAccount1");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.BankTrx", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.BankTrxBatch", "BankTrxBatch")
                        .WithMany("BankTrxes")
                        .HasForeignKey("BankTrxBatchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblBankTrx_tblBankTrxBatch");

                    b.HasOne("Hot4.DataModel.Models.BankTrxStates", "BankTrxState")
                        .WithMany("BankTrxes")
                        .HasForeignKey("BankTrxStateId")
                        .IsRequired()
                        .HasConstraintName("FK_tblBankTrx_tblBankTrxState");

                    b.HasOne("Hot4.DataModel.Models.BankTrxTypes", "BankTrxType")
                        .WithMany("BankTrxes")
                        .HasForeignKey("BankTrxTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_tblBankTrx_tblBankTrxType");

                    b.HasOne("Hot4.DataModel.Models.Payment", "Payment")
                        .WithMany("BankTrxes")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_tblBankTrx_tblPayment");

                    b.Navigation("BankTrxBatch");

                    b.Navigation("BankTrxState");

                    b.Navigation("BankTrxType");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.BankTrxBatch", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Banks", "Bank")
                        .WithMany("BankTrxBatches")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_tblBankTrxBatch_tblBank");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Brand", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Networks", "Network")
                        .WithMany("Brands")
                        .HasForeignKey("NetworkId")
                        .IsRequired()
                        .HasConstraintName("FK_tblBrand_tblNetwork");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ConsoleAccess", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.ConsoleAction", "ConsoleAction")
                        .WithMany("ConsoleAccesses")
                        .HasForeignKey("ConsoleActionId")
                        .IsRequired()
                        .HasConstraintName("FK_tblConsoleAccess_tblConsoleAction");

                    b.Navigation("ConsoleAction");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.HotTypeCode", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.HotTypes", "HotType")
                        .WithMany("HotTypeCodes")
                        .HasForeignKey("HotTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_tblHotTypeCode_tblHotType");

                    b.Navigation("HotType");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Payment", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Account", "Account")
                        .WithMany("Payments")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_tblPayment_tblAccount");

                    b.HasOne("Hot4.DataModel.Models.PaymentSources", "PaymentSource")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentSourceId")
                        .IsRequired()
                        .HasConstraintName("FK_tblPayment_tblPaymentSource");

                    b.HasOne("Hot4.DataModel.Models.PaymentTypes", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_tblPayment_tblPaymentType");

                    b.Navigation("Account");

                    b.Navigation("PaymentSource");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.PinBatches", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.PinBatchTypes", "PinBatchType")
                        .WithMany("PinBatches")
                        .HasForeignKey("PinBatchTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_tblPinBatch_tblPinBatchType");

                    b.Navigation("PinBatchType");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Pins", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Brand", "Brand")
                        .WithMany("Pins")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_tblPin_tblBrand");

                    b.HasOne("Hot4.DataModel.Models.PinBatches", "PinBatch")
                        .WithMany("Pins")
                        .HasForeignKey("PinBatchId")
                        .IsRequired()
                        .HasConstraintName("FK_tblPin_tblPinBatch");

                    b.HasOne("Hot4.DataModel.Models.PinStates", "PinState")
                        .WithMany("Pins")
                        .HasForeignKey("PinStateId")
                        .IsRequired()
                        .HasConstraintName("FK_tblPin_tblPinState");

                    b.Navigation("Brand");

                    b.Navigation("PinBatch");

                    b.Navigation("PinState");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Product", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_tblProduct_tblBrand");

                    b.HasOne("Hot4.DataModel.Models.WalletType", "WalletType")
                        .WithMany("Products")
                        .HasForeignKey("WalletTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_tblProduct_tblWalletType");

                    b.Navigation("Brand");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ProductField", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Product", "Product")
                        .WithMany("ProductFields")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_tblBrandField_tblBrand");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ProductMetaData", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Product", "Product")
                        .WithMany("ProductMetaData")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_tblBrandMetaData_tblBrand");

                    b.HasOne("Hot4.DataModel.Models.ProductMetaDataType", "ProductMetaDataType")
                        .WithMany("ProductMetaDatas")
                        .HasForeignKey("ProductMetaDataTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_tblBrandMetaData_tblBrandMetaDataType");

                    b.Navigation("Product");

                    b.Navigation("ProductMetaDataType");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ProfileDiscount", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Brand", "Brand")
                        .WithMany("ProfileDiscounts")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_tblProfileDiscount_tblBrand");

                    b.HasOne("Hot4.DataModel.Models.Profile", "Profile")
                        .WithMany("ProfileDiscounts")
                        .HasForeignKey("ProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_tblProfileDiscount_tblProfile");

                    b.Navigation("Brand");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Recharge", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Access", "Access")
                        .WithMany("Recharges")
                        .HasForeignKey("AccessId")
                        .IsRequired()
                        .HasConstraintName("FK_tblRecharge_tblAccess");

                    b.HasOne("Hot4.DataModel.Models.Brand", "Brand")
                        .WithMany("Recharges")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_tblRecharge_tblBrand");

                    b.HasOne("Hot4.DataModel.Models.Pins", null)
                        .WithMany("Recharges")
                        .HasForeignKey("PinsPinId");

                    b.HasOne("Hot4.DataModel.Models.Sms", null)
                        .WithMany("Recharges")
                        .HasForeignKey("Smsid");

                    b.HasOne("Hot4.DataModel.Models.States", "State")
                        .WithMany("Recharges")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_tblRecharge_tblState");

                    b.Navigation("Access");

                    b.Navigation("Brand");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.RechargePin", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Pins", "Pin")
                        .WithMany()
                        .HasForeignKey("PinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hot4.DataModel.Models.Recharge", "Recharge")
                        .WithMany()
                        .HasForeignKey("RechargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pin");

                    b.Navigation("Recharge");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.RechargePrepaid", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Recharge", "Recharge")
                        .WithOne("RechargePrepaid")
                        .HasForeignKey("Hot4.DataModel.Models.RechargePrepaid", "RechargeId")
                        .IsRequired()
                        .HasConstraintName("FK_tblRechargePrepaid_tblRecharge");

                    b.Navigation("Recharge");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Reservation", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Access", "Access")
                        .WithMany("Reservations")
                        .HasForeignKey("AccessId")
                        .IsRequired()
                        .HasConstraintName("FK_tblreservation_tblAccess");

                    b.HasOne("Hot4.DataModel.Models.Brand", "Brand")
                        .WithMany("Reservations")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_tblReservationToBrand");

                    b.HasOne("Hot4.DataModel.Models.Recharge", "Recharge")
                        .WithMany("Reservations")
                        .HasForeignKey("RechargeId")
                        .IsRequired()
                        .HasConstraintName("FK_tblreservation_tblRecharge");

                    b.HasOne("Hot4.DataModel.Models.ReservationStates", "State")
                        .WithMany("Reservations")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_tblReservation_tblReservationState");

                    b.Navigation("Access");

                    b.Navigation("Brand");

                    b.Navigation("Recharge");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ReservationLog", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.ReservationStates", "NewState")
                        .WithMany()
                        .HasForeignKey("NewStateId")
                        .IsRequired()
                        .HasConstraintName("FK_tblReservationLog_tblReservationState1");

                    b.HasOne("Hot4.DataModel.Models.ReservationStates", "OldState")
                        .WithMany()
                        .HasForeignKey("OldStateId")
                        .IsRequired()
                        .HasConstraintName("FK_tblReservationLog_tblReservationState");

                    b.HasOne("Hot4.DataModel.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation");

                    b.Navigation("NewState");

                    b.Navigation("OldState");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.SelfTopUp", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Access", "Access")
                        .WithMany("SelfTopUps")
                        .HasForeignKey("AccessId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSelfTopUp_tblAccess");

                    b.HasOne("Hot4.DataModel.Models.BankTrx", "BankTrx")
                        .WithMany("SelfTopUps")
                        .HasForeignKey("BankTrxId")
                        .HasConstraintName("FK_tblSelfTopUp_tblBankTrx");

                    b.HasOne("Hot4.DataModel.Models.Brand", "Brand")
                        .WithMany("SelfTopUps")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK__tblSelfTo__Brand__5CACADF9");

                    b.HasOne("Hot4.DataModel.Models.Recharge", "Recharge")
                        .WithMany("SelfTopUps")
                        .HasForeignKey("RechargeId")
                        .HasConstraintName("FK_tblSelfTopUp_tblRecharge");

                    b.Navigation("Access");

                    b.Navigation("BankTrx");

                    b.Navigation("Brand");

                    b.Navigation("Recharge");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Sms", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Priorities", "Priority")
                        .WithMany("Sms")
                        .HasForeignKey("PriorityId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSMS_tblPriority");

                    b.HasOne("Hot4.DataModel.Models.Smpp", "Smpp")
                        .WithMany("Sms")
                        .HasForeignKey("SmppId")
                        .HasConstraintName("FK_tblSMS_tblSmpp");

                    b.HasOne("Hot4.DataModel.Models.Sms", "SmsidInNavigation")
                        .WithMany("InverseSmsidInNavigation")
                        .HasForeignKey("SmsidIn")
                        .HasConstraintName("FK_tblSMS_tblSMS");

                    b.HasOne("Hot4.DataModel.Models.States", "State")
                        .WithMany("Sms")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSMS_tblState");

                    b.Navigation("Priority");

                    b.Navigation("Smpp");

                    b.Navigation("SmsidInNavigation");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.SmsRecharge", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Recharge", "Recharge")
                        .WithMany()
                        .HasForeignKey("RechargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hot4.DataModel.Models.Sms", "Sms")
                        .WithMany()
                        .HasForeignKey("SmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recharge");

                    b.Navigation("Sms");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Subscriber", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Account", "Account")
                        .WithMany("Subscribers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSubscriber_tblAccount");

                    b.HasOne("Hot4.DataModel.Models.Brand", "Brand")
                        .WithMany("Subscribers")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_tblSubscriber_tblBrand");

                    b.Navigation("Account");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Transfer", b =>
                {
                    b.HasOne("Hot4.DataModel.Models.Channels", "Channel")
                        .WithMany("Transfers")
                        .HasForeignKey("ChannelId")
                        .IsRequired()
                        .HasConstraintName("FK_tblTransfer_tblChannel");

                    b.HasOne("Hot4.DataModel.Models.Payment", "PaymentIdFromNavigation")
                        .WithMany("TransferPaymentIdFromNavigations")
                        .HasForeignKey("PaymentIdFrom")
                        .IsRequired()
                        .HasConstraintName("FK_tblTransfer_tblPayment");

                    b.HasOne("Hot4.DataModel.Models.Payment", "PaymentIdToNavigation")
                        .WithMany("TransferPaymentIdToNavigations")
                        .HasForeignKey("PaymentIdTo")
                        .IsRequired()
                        .HasConstraintName("FK_tblTransfer_tblPayment1");

                    b.Navigation("Channel");

                    b.Navigation("PaymentIdFromNavigation");

                    b.Navigation("PaymentIdToNavigation");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Access", b =>
                {
                    b.Navigation("Recharges");

                    b.Navigation("Reservations");

                    b.Navigation("SelfTopUps");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Account", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Address");

                    b.Navigation("Payments");

                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.BankTrx", b =>
                {
                    b.Navigation("SelfTopUps");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.BankTrxBatch", b =>
                {
                    b.Navigation("BankTrxes");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.BankTrxStates", b =>
                {
                    b.Navigation("BankTrxes");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.BankTrxTypes", b =>
                {
                    b.Navigation("BankTrxes");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Banks", b =>
                {
                    b.Navigation("BankTrxBatches");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Brand", b =>
                {
                    b.Navigation("Pins");

                    b.Navigation("Products");

                    b.Navigation("ProfileDiscounts");

                    b.Navigation("Recharges");

                    b.Navigation("Reservations");

                    b.Navigation("SelfTopUps");

                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Channels", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ConsoleAction", b =>
                {
                    b.Navigation("ConsoleAccesses");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.HotTypes", b =>
                {
                    b.Navigation("HotTypeCodes");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Networks", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Payment", b =>
                {
                    b.Navigation("BankTrxes");

                    b.Navigation("TransferPaymentIdFromNavigations");

                    b.Navigation("TransferPaymentIdToNavigations");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.PaymentSources", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.PaymentTypes", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.PinBatchTypes", b =>
                {
                    b.Navigation("PinBatches");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.PinBatches", b =>
                {
                    b.Navigation("Pins");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.PinStates", b =>
                {
                    b.Navigation("Pins");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Pins", b =>
                {
                    b.Navigation("Recharges");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Priorities", b =>
                {
                    b.Navigation("Sms");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Product", b =>
                {
                    b.Navigation("ProductFields");

                    b.Navigation("ProductMetaData");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ProductMetaDataType", b =>
                {
                    b.Navigation("ProductMetaDatas");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Profile", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ProfileDiscounts");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Recharge", b =>
                {
                    b.Navigation("RechargePrepaid");

                    b.Navigation("Reservations");

                    b.Navigation("SelfTopUps");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.ReservationStates", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Smpp", b =>
                {
                    b.Navigation("Sms");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.Sms", b =>
                {
                    b.Navigation("InverseSmsidInNavigation");

                    b.Navigation("Recharges");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.States", b =>
                {
                    b.Navigation("Recharges");

                    b.Navigation("Sms");
                });

            modelBuilder.Entity("Hot4.DataModel.Models.WalletType", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
