@page "/Test"

@inject Hot4.Repository.Abstract.IBankRepository bankRepository;
@inject Hot4.Repository.Abstract.IBankTrxBatchRepository bankBatchRepository;
@inject Hot4.Repository.Abstract.IBankTrxRepository banktrxRepository;

@inject Hot4.Repository.Abstract.IPinRepository pinRepository;

@inject Hot4.Repository.Abstract.ITransferRepository transferRepository;
@inject Hot4.Repository.Abstract.IWebRequestRepository webRequestRepository;
@inject Hot4.Repository.Abstract.ISMSRepository smsRepository;
@inject Hot4.Repository.Abstract.IRechargeRepository rechargeRepository;

@using Hot4.DataModel.Models;
@using Hot4.ViewModel;


<h3>Bank</h3>
<form method="post" @formname="myform" @onsubmit="GetBank">
    <AntiforgeryToken />
    <button type="submit">Submit</button>
</form>
<br />
<h3>Pin</h3>
<form method="post" @formname="myformPin" @onsubmit="GetPin">
    <AntiforgeryToken />
    <button type="submit">Submit</button>
</form>
<br />
<h3>Transfer</h3>
<form method="post" @formname="myformTransfer" @onsubmit="GetTransfer">
    <AntiforgeryToken />
    <button type="submit">Submit</button>
</form>
<br />
<h3>Web Request</h3>
<form method="post" @formname="myformWebRequest" @onsubmit="GetWebRequest">
    <AntiforgeryToken />
    <button type="submit">Submit</button>
</form>
<br />
<h3>SMS</h3>
<form method="post" @formname="myformSMS" @onsubmit="GetSMS">
    <AntiforgeryToken />
    <button type="submit">Submit</button>
</form>
<br />
<h3>Recharge</h3>
<form method="post" @formname="myformRecharge" @onsubmit="GetRecharge">
    <AntiforgeryToken />
    <button type="submit">Submit</button>
</form>

@code {
    private Banks bnk { get; set; } = new() { Bank = "testbnk", BankId = 19 };
    private EcoCashSearchModel ecoCashSerchMdl { get; set; } = new() { Amount = .20m, date = DateTime.Now, Mobile = "0777931881" };

    private BankTransactionSearchModel trnsModelForDuplicate { get; set; } = new() { Amount = 29, Balance = 0, BankId = 8, BankRef = "pending", TrxDate = Convert.ToDateTime("2024-11-17 00:49:34.307") };

    private PinRechargePayload pinRechargePayload { get; set; } = new() { Amount = 10, BrandId = 1, RechargeId = 111 };
    private PinRechargePromoPayload pinRechargePromoPayload { get; set; } = new() { AccessCode = "3232323", BrandId = 1, Mobile = "7878", PinValue = 1, Quantity = 10 };

    private SMSSearchModel smsSearchMdl { get; set; } = new() { StartDate = DateTime.Now.AddMonths(-9), EndDate = DateTime.Now, MessageText = "", Mobile = "", PageNo = 1, PageSize = 10, SmppId = -1, StateId = -1 };
    private async Task GetBank()
    {
        // var bankTrxByBatch = await banktrxRepository.GetTranscation_by_Batch(10024185, true);


        // var bankTrxById = await banktrxRepository.GetTranscation_by_Id(14187048); //exec xBankTrx_GetFromTrxID 14187048


        //  var bankTrxByType = await banktrxRepository.GetAllTranscation_by_Type(17);//exec xBankTrx_ListNewEcocash, 
        //  var bankTrxByType2 = await banktrxRepository.GetAllTranscation_by_Type(19); //exec xBankTrx_ListNewOneMoney

        // var bankTrxByType3 = await banktrxRepository.GetPendingTranscation_by_Type(17); //exec xBankTrx_ListPendingEcoCash
        // var bankTrxByType4 = await banktrxRepository.GetPendingTranscation_by_Type(19); //exec xBankTrx_ListPendingOneMoney


        //   var bankDuplicateTrans = await banktrxRepository.GetDuplicateTranscation(trnsModelForDuplicate); //exec xBankTrx_FindDuplicate 8,29,'2024-11-17 00:49:34.307','pending',0

        // var bankByPaymnetId = await banktrxRepository.GetTranscation_by_PaymentId("E108F4DE-EE68-454D-80F3-40A6BEF053A3"); //exec xBankTrx_GetFromvPayment 'E108F4DE-EE68-454D-80F3-40A6BEF053A3'

        //var bankEcoCashPendingTransAmtx = await banktrxRepository.GetEcoCashPendingTranscationCount(ecoCashSerchMdl); //exec xBankTrx_HasEcocashTranPending '0777931881',.20

        // // var resultBankRef = await bankBatchRepository.GetCurrentBatch(1, "09 Oct 21 02.csv", "lordrique.muvengwa");
        //await bankRepository.AddBank(bnk);
        //  var resAccountSelect = await bankRepository.ListBanks();


    }

    private async Task GetPin()
    {
        // var pinByBatchId = await pinRepository.GetPinDetail_by_batchId(10008274); //exec xPin_List 10008274

        //var pinLoaded = await pinRepository.GetPinLoaded_by_batchId(10008274);  //exec xPin_Loaded 10008274

        // var pinStock = await pinRepository.GetPinStock();  //exec xPin_Stock

        //  var pinRecharge = await pinRepository.PinRecharge(pinRechargePayload);
        var pinRechargePromo = await pinRepository.PinRechargePromo(pinRechargePromoPayload);
        var pinRedeemedPromo = await pinRepository.PinRedeemedPromo(10008274);
    }
    private async Task GetTransfer()
    {
        //  var result = await transferRepository.ListTransfer(2, 15);
        // var resultbal = await transferRepository.GetStockTradeBalByAccountId(12177814); // exec xStockTrade_Balance 12177814

        StockTradeSearchModel mdl = new StockTradeSearchModel() { AccountId = 10520030, Amount = 400, Rate = 10 };
        var resultTraded = await transferRepository.GetStockTrade(mdl);// exec xStockTrade_Trade 10520030,400.00,10
    }
    private async Task GetWebRequest()
    {
        var result = await webRequestRepository.GetWebRequestByRefAndAccessId("", 10664643);
    }

    private async Task GetSMS()
    {
        //var result = await smsRepository.SmsBulkSend("");
        var resultS = await smsRepository.SmsBulkSmsSend("testing demo SmsBulkSmsSend");
        var resultEmailAgg = await smsRepository.EmailAggregators();
         var resultEmailCorp = await smsRepository.EmailCorporates();
        //  var resultSMSInbox = await smsRepository.SMSInbox();

        // DateTime dt = Convert.ToDateTime("2024-10-29 00:49:34.307");
        // var resultSMSInbox = await smsRepository.GetSMSByAccountSMSDate(11552422,dt,1,10);
        //var resultSMSSearch = await smsRepository.SMSSearch(smsSearchMdl);
    }

    private RechargeAggSearchModel rechargeAggSearchModel { get; set; } = new() { AccountId = 10520030, StartDate = DateTime.Now.AddMonths(-9), EndDate = DateTime.Now, PageNo = 1, PageSize = 10 };
    private RechargeFindModel rechargeFindModel { get; set; } = new() { AccountId = 10520030, Mobile = "0777931881", PageNo = 1, PageSize = 10 };
    
    private async Task GetRecharge()
    {
       // var result = await rechargeRepository.GetRechargeAggregator(rechargeAggSearchModel);

       // var resultFind = await rechargeRepository.FindRechargeByMobileAndAccountId(rechargeFindModel);
        var resultByBrandIds = await rechargeRepository.RechargePendingStsByMulBrands(new List<byte>{1,2,3});

        var resultByBrandId = await rechargeRepository.RechargePendingStsByBrandId(1);
    }
}
